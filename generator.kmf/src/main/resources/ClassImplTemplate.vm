package ${class.packName}.impl;

public class ${class.name}Impl extends org.kevoree.modeling.api.abs.AbstractKObject implements ${class.fqn} {

    public ${class.name}Impl(${mmPackName}.${mmName}View p_factory, long p_uuid, org.kevoree.modeling.api.meta.MetaClass p_metaClass) {
        super(p_factory, p_uuid, p_metaClass);
    }

#foreach($prop in $class.properties)
    #if($prop.class.name.equals("duc.ugcm.ast.Attribute"))
    @Override
    public ${primHelper.toJavaType(${prop.getType()})} get${helper.upperFirst(${prop.name})}() {
        return (${primHelper.toJavaType(${prop.getType()})}) get(${class.packName}.meta.Meta${class.name}.ATT_${prop.name.toUpperCase()});
    }

    @Override
    public ${class.fqn} set${helper.upperFirst(${prop.name})}(${primHelper.toJavaType(${prop.getType()})} newValue) {
        set(${class.packName}.meta.Meta${class.name}.ATT_${prop.name.toUpperCase()}, newValue);
        return this;
    }
    #elseif($prop.class.name.equals("duc.ugcm.ast.Relation"))
    #if($prop.isMultiple())
    @Override
    public ${class.fqn} add${helper.upperFirst($prop.name)}(${prop.type.fqn} toAdd) {
        mutate(org.kevoree.modeling.api.KActionType.ADD, ${class.packName}.meta.Meta${class.name}.REF_${prop.name.toUpperCase()}, toAdd);
        return this;
    }

    @Override
    public ${class.fqn} remove${helper.upperFirst($prop.name)}(${prop.type.fqn} toRemove) {
        mutate(org.kevoree.modeling.api.KActionType.REMOVE, ${class.packName}.meta.Meta${class.name}.REF_${prop.name.toUpperCase()}, toRemove);
        return this;
    }

    @Override
    public org.kevoree.modeling.api.KDefer<${prop.type.fqn}[]> get${helper.upperFirst($prop.name)}() {
        final org.kevoree.modeling.api.abs.AbstractKDeferWrapper<${prop.getType().fqn}[]> task = new org.kevoree.modeling.api.abs.AbstractKDeferWrapper<${prop.getType().fqn}[]>();
        this.internal_ref(${class.packName}.meta.Meta${class.name}.REF_${prop.name.toUpperCase()}, new org.kevoree.modeling.api.Callback<org.kevoree.modeling.api.KObject[]>() {
            @Override
            public void on(org.kevoree.modeling.api.KObject[] kObjects) {
                ${prop.getType().fqn}[] casted = new ${prop.getType().fqn}[kObjects.length];
                for(int i=0;i<kObjects.length;i++){
                    casted[i] = (${prop.getType().fqn}) kObjects[i];
                }
                task.initCallback().on(casted);
            }
        });
        return task;
    }

    @Override
    public int sizeOf${helper.upperFirst($prop.name)}() {
        return size(${class.packName}.meta.Meta${class.name}.REF_${prop.name.toUpperCase()});
    }


    #else
    @Override
    public ${class.fqn} set${helper.upperFirst($prop.name)}(${prop.type.fqn} newValue) {
        mutate(org.kevoree.modeling.api.KActionType.SET, ${class.packName}.meta.Meta${class.name}.REF_${prop.getName().toUpperCase()}, newValue);
        return this;
    }

    @Override
    public org.kevoree.modeling.api.KDefer<${prop.type.fqn}> get${helper.upperFirst($prop.name)}(){
        final org.kevoree.modeling.api.abs.AbstractKDeferWrapper<${prop.getType().fqn}> task = new org.kevoree.modeling.api.abs.AbstractKDeferWrapper<${prop.getType().fqn}>();
        this.internal_ref(${class.packName}.meta.Meta${class.name}.REF_${prop.getName().toUpperCase()}, new org.kevoree.modeling.api.Callback<org.kevoree.modeling.api.KObject[]>() {
            @Override
            public void on(org.kevoree.modeling.api.KObject[] kObjects) {
                if(kObjects.length >0){
                    task.initCallback().on((${prop.getType().fqn}) kObjects[0]);
                } else {
                    task.initCallback().on(null);
                }
            }
        });
        return task;
    }
    #end
    #end
#end

    @Override
    public ${mmPackName}.${mmName}View view() {
        return (${mmPackName}.${mmName}View) super.view();
    }

}

#* @vtlvariable name="class" type="duc.ugcm.ast.Class" *#
#* @vtlvariable name="primHelper" type="duc.ugcm.generator.kmf.PrimitiveTypeHelper" *#
#* @vtlvariable name="helper" type="duc.ugcm.generator.kmf.JavaGeneratorHelper" *#
#* @vtlvariable name="mmPackName" type="java.lang.String" *#
#* @vtlvariable name="mmName" type="java.lang.String" *#